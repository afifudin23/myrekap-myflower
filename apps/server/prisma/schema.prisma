// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// RULES
// Menggunakan Snake Case

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String
  role      Role
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  cartItems CartItem[]
  orders    Order[]
  reviews   Review[]

  @@map("users")
}

enum Role {
  ADMIN      @map("admin")
  SUPERADMIN @map("superadmin")
  CUSTOMER   @map("customer")
}

model Product {
  id          String  @id @default(cuid())
  name        String  @unique @map("name")
  price       Int     @map("price")
  stock       Int     @map("stock")
  description String  @map("description")
  isActive    Boolean @default(true) @map("is_active")

  images     ProductImage[]
  cartItems  CartItem[]
  orderItems OrderItem[]
  reviews    Review[]

  @@map("products")
}

model ProductImage {
  id        String @id @default(cuid())
  fileName  String @map("file_name")
  size      Int    @map("size")
  publicId  String @map("public_id")
  secureUrl String @map("secure_url")
  productId String @map("product_id")

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model CartItem {
  id        String @id @default(cuid())
  userId    String @map("user_id")
  productId String @map("product_id")
  quantity  Int    @map("quantity")

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("cart_items")
}

model Order {
  id               String           @id @default(cuid())
  orderCode        String           @unique @map("order_code")
  userId           String           @map("user_id")
  customerName     String           @map("customer_name")
  customerCategory CustomerCategory @map("customer_category")

  // Delivery
  deliveryOption  DeliveryOption @map("delivery_option")
  deliveryAddress String?        @map("delivery_address")
  deliveryDate    DateTime?      @map("delivery_date")
  readyDate       DateTime       @map("ready_date")

  // Payment
  totalPrice            Int            @map("total_price")
  shippingCost          Int?           @map("shipping_cost")
  paymentMethod         PaymentMethod? @map("payment_method")
  paymentProvider       String?        @map("payment_provider")
  paymentStatus         PaymentStatus  @map("payment_status")
  previousPaymentStatus PaymentStatus? @map("previous_payment_status")

  // Status
  orderStatus OrderStatus @default(IN_PROCESS) @map("order_status")
  orderDate   DateTime    @default(now()) @map("order_date")

  // Relation
  paymentProof    PaymentProof?
  finishedProduct FinishedProduct?
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  items           OrderItem[]

  @@map("orders")
}

model OrderItem {
  id              String  @id @default(cuid())
  orderId         String  @map("order_id")
  productId       String  @map("product_id")
  quantity        Int     @map("quantity")
  greetingMessage String? @map("greeting_message")
  unitPrice       Int     @map("unit_price")
  totalPrice      Int     @map("total_price")

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model PaymentProof {
  id        String @id @default(cuid())
  fileName  String @map("file_name")
  size      Int    @map("size")
  publicId  String @map("public_id")
  secureUrl String @map("secure_url")
  orderId   String @unique @map("order_id")

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payment_proofs")
}

model FinishedProduct {
  id        String @id @default(cuid())
  fileName  String @map("file_name")
  size      Int    @map("size")
  publicId  String @map("public_id")
  secureUrl String @map("secure_url")
  orderId   String @unique @map("order_id")

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("finished_products")
}

model Review {
  id        String @id @default(cuid())
  rating    Int    @map("rating")
  comment   String @map("comment")
  userId    String @map("user_id")
  productId String @map("product_id")

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

enum DeliveryOption {
  DELIVERY @map("delivery")
  PICKUP   @map("pickup")
}

enum CustomerCategory {
  UMUM           @map("umum")
  PEMDA          @map("pemda")
  AKADEMIK       @map("akademik")
  RUMAH_SAKIT    @map("rumah_sakit")
  POLISI_MILITER @map("polisi_militer")
  PERBANKAN      @map("perbankan")
}

enum PaymentMethod {
  COD           @map("cod")
  CASH          @map("cash")
  BANK_TRANSFER @map("bank_transfer")
  CREDIT_CARD   @map("credit_card")
  CSTORE        @map("cstore")
  QRIS          @map("qris")
  EWALLET        @map("ewallet")
}

enum OrderStatus {
  IN_PROCESS @map("in_process")
  COMPLETED  @map("completed")
  CANCELLED  @map("cancelled")
}

enum PaymentStatus {
  PENDING   @map("pending")
  UNPAID    @map("unpaid")
  PAID      @map("paid")
  CANCELED @map("canceled")
  EXPIRED   @map("expired")
  REFUNDED  @map("refunded")
  DENIED    @map("denied")
}
